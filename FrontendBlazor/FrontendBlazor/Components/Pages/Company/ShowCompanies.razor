@page "/ShowCompanies"
@inject HttpClient Http
@using Shared.DTOs

<h3 class="mb-4">Companies & Their Jobs</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

@if (companies == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!companies.Any())
{
    <p class="text-muted">No companies found.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var company in companies)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@company.CompanyName</h5>
                        <p class="card-text"><strong>Address:</strong> @company.OfficeAddress</p>
                        <p class="card-text"><strong>Phone:</strong> @company.OfficePhone</p>

                        @if (companyJobs.TryGetValue(company.Id, out var jobs) && jobs.Any())
                        {
                            <h6 class="mt-3">Jobs:</h6>
                            <ul class="list-group list-group-flush">
                                @foreach (var job in jobs)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@job.Title - @job.Category</span>
                                        <small class="text-muted">@job.CreatedOn.ToString("dd MMM yyyy")</small>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted mt-2">No jobs available</p>
                        }
                    </div>
                    <div class="card-footer text-end">
                        <a href="/ShowJobs" class="btn btn-sm btn-outline-primary">View All Jobs</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    protected List<CompanyDto> companies;
    protected Dictionary<Guid, List<JobDto>> companyJobs = new();
    protected string statusMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            companies = await Http.GetFromJsonAsync<List<CompanyDto>>("http://localhost:5142/api/Company");
            
            if (companies != null && companies.Any())
            {
                statusMessage = "Companies loaded successfully!";

                foreach (var company in companies)
                {
                    var jobs = await Http.GetFromJsonAsync<List<JobDto>>($"http://localhost:5142/api/Company/GetCompanyJobsById/{company.Id}");
                    companyJobs[company.Id] = jobs ?? new List<JobDto>();
                }
            }
            else
            {
                statusMessage = "No companies found.";
            }
        }
        catch(Exception ex)
        {
            statusMessage = $"Error loading companies: {ex.Message}";
        }
    }
}
