@page "/Login"
@rendermode InteractiveServer
@inject NavigationManager navManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm method="post" FormName="LoginForm" OnValidSubmit="LoginForm" Model="loginDto" autocomplete="off">
            <h3>Login</h3>
            <div class="mb-3">
                <label for="Email" class="form-label">
                    Email
                </label>
                <InputText id="Email" @bind-Value="loginDto.Email" class="form-control border-dark"/>
            </div>
            <div class="mb-3">
                <label for="Password" class="form-label">
                    Password
                </label>
                <InputText id="Password" @bind-Value="loginDto.Password" type="password" class="form-control border-dark"/>
            </div>
            <div class="mb-3">
                <button class="btn btn-primary shadow-none">
                    Login
                </button>
            </div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            <DataAnnotationsValidator/>
            <ValidationSummary/>
        </EditForm>
    </div>
</div>

@code
{
    [SupplyParameterFromForm]
    public LoginDto loginDto { get; set; } = new();

    public string ErrorMessage { get; set; } = string.Empty;

    protected async Task LoginForm()
    {
        ErrorMessage = string.Empty;
        
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5142/api/Auth/Login", loginDto);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                
                await LocalStorage.SetItemAsync("userId", result.Id.ToString());
                await LocalStorage.SetItemAsync("userEmail", loginDto.Email);
                await LocalStorage.SetItemAsync("isLoggedIn", true);
                
                navManager.NavigateTo("/Home", forceLoad: true);
            }
            else
            {
                var strResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Login failed: " + strResponse);
                ErrorMessage = "Email sau parolă greșită.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Eroare: {ex.Message}";
            Console.WriteLine($"Exception: {ex}");
        }
    }

    public class LoginDto
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
    
    public class LoginResponse
    {
        public string Message { get; set; }
        public Guid Id { get; set; }
    }
}