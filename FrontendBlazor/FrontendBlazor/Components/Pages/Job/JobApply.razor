@page "/JobApply/{JobId:guid}"
@inject HttpClient Http
@using Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms

<h3>Apply for Job</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

@if (job == null)
{
    <p>Loading job details...</p>
}
else
{
    <!-- Job Details Card -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h5 class="card-title">@job.Title</h5>
            <p class="text-muted">@job.Category | @job.WorkTime | @job.Experience</p>
            @if (job.IsSalaryMentionated)
            {
                <p><strong>Salary:</strong> @job.Salary</p>
            }
            <p><strong>Location:</strong> @job.Location</p>
            <p><strong>Skills Required:</strong> @job.Skills</p>
            <p><strong>Description:</strong> @job.Description</p>
            <small class="text-muted">Posted on: @job.CreatedOn.ToString("dd MMM yyyy")</small>
        </div>
    </div>

    <!-- Application Form -->
    <EditForm Model="applicationModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="fullName" class="form-label">Full Name</label>
            <InputText id="fullName" class="form-control" @bind-Value="applicationModel.FullName" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="applicationModel.Email" type="email" />
        </div>

        <div class="mb-3">
            <label for="cvFile" class="form-label">Upload CV (PDF)</label>
            <InputFile OnChange="HandleFileSelected" accept=".pdf" />
            @if (!string.IsNullOrEmpty(selectedFileName))
            {
                <p class="mt-1 text-muted">Selected file: @selectedFileName</p>
            }
        </div>

        <button type="submit" class="btn btn-primary">Submit Application</button>
    </EditForm>
}

@code {
    [Parameter] public Guid JobId { get; set; }

    private JobDto job;
    private ApplicationModel applicationModel = new();
    private IBrowserFile selectedFile;
    private string selectedFileName;
    private string statusMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var jobs = await Http.GetFromJsonAsync<List<JobDto>>("http://localhost:5142/api/Job");
            job = jobs.FirstOrDefault(j => j.Id == JobId);

            if (job == null)
            {
                statusMessage = "Job not found.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading job: {ex.Message}";
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        selectedFileName = selectedFile.Name;
    }

    private async Task HandleValidSubmit()
    {
        if (selectedFile == null)
        {
            statusMessage = "Please upload your CV.";
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024)); // max 5MB
            content.Add(streamContent, "cvFile", selectedFile.Name);
            content.Add(new StringContent(applicationModel.FullName), "FullName");
            content.Add(new StringContent(applicationModel.Email), "Email");
            content.Add(new StringContent(JobId.ToString()), "JobId");

            var response = await Http.PostAsync("http://localhost:5142/api/Application/Submit", content);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Application submitted successfully!";
                applicationModel = new ApplicationModel();
                selectedFile = null;
                selectedFileName = null;
            }
            else
            {
                statusMessage = $"Error submitting application: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    public class ApplicationModel
    {
        public string FullName { get; set; }
        public string Email { get; set; }
    }
}
