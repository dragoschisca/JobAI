@page "/ShowJobs"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Shared.DTOs

<head>
    <link href="CSS/ShowJobs.css" rel="stylesheet"/>
</head>

<div class="page-container">
    <!-- Header -->
    <header class="page-header">
        <div class="header-content">
            <div class="header-left">
                <h1>üîç Toate joburile</h1>
                <p class="subtitle">@totalJobs joburi disponibile</p>
            </div>
            
            @if (userId != null)
            {
                <div class="user-section">
                    <div class="user-info">
                        <div class="user-avatar">
                            <NavLink class="nav-link" href=@($"/ShowProfile/{userId}") Match="NavLinkMatch.All">
                                @GetInitials(userEmail)
                            </NavLink>
                        </div>
                        <div class="user-details">
                            <span class="user-label">Logat ca</span>
                            <span class="user-name">@userEmail</span>
                        </div>
                    </div>
                    <button class="btn-logout" @onclick="Logout">
                        <span class="icon">üö™</span> Logout
                    </button>
                </div>
            }
        </div>
    </header>

    <!-- Filters & Search Section -->
    <div class="filters-section">
        <div class="search-container">
            <div class="search-box">
                <span class="search-icon">üîç</span>
                <input 
                    type="text" 
                    @bind="searchTerm" 
                    @bind:event="oninput"
                    @onkeyup="FilterJobs"
                    placeholder="CautƒÉ dupƒÉ titlu, companie, categorie..."
                    class="search-input" />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="clear-search" @onclick="ClearSearch">‚úï</button>
                }
            </div>
        </div>

        <div class="filter-controls">
            <div class="filter-group">
                <label>Categorie:</label>
                <select @bind="selectedCategory" @bind:after="FilterJobs" class="filter-select">
                    <option value="">Toate categoriile</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label>Program:</label>
                <select @bind="selectedWorkTime" @bind:after="FilterJobs" class="filter-select">
                    <option value="">Toate</option>
                    @foreach (var workTime in workTimes)
                    {
                        <option value="@workTime">@workTime</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label>Experien»õƒÉ:</label>
                <select @bind="selectedExperience" @bind:after="FilterJobs" class="filter-select">
                    <option value="">Toate</option>
                    @foreach (var exp in experiences)
                    {
                        <option value="@exp">@exp</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label>Salariu:</label>
                <select @bind="salaryFilter" @bind:after="FilterJobs" class="filter-select">
                    <option value="all">Toate</option>
                    <option value="with-salary">Cu salariu men»õionat</option>
                    <option value="no-salary">FƒÉrƒÉ salariu</option>
                </select>
            </div>

            <button class="btn-reset" @onclick="ResetFilters">
                <span class="icon">‚Üª</span> Reset filtre
            </button>
        </div>

        <div class="sort-controls">
            <label>Sortare:</label>
            <div class="sort-buttons">
                <button class="sort-btn @(sortBy == "date-desc" ? "active" : "")" @onclick='() => SortJobs("date-desc")'>
                    üìÖ Cele mai noi
                </button>
                <button class="sort-btn @(sortBy == "date-asc" ? "active" : "")" @onclick='() => SortJobs("date-asc")'>
                    üìÖ Cele mai vechi
                </button>
                <button class="sort-btn @(sortBy == "salary-desc" ? "active" : "")" @onclick='() => SortJobs("salary-desc")'>
                    üí∞ Salariu descrescƒÉtor
                </button>
                <button class="sort-btn @(sortBy == "salary-asc" ? "active" : "")" @onclick='() => SortJobs("salary-asc")'>
                    üí∞ Salariu crescƒÉtor
                </button>
                <button class="sort-btn @(sortBy == "title" ? "active" : "")" @onclick='() => SortJobs("title")'>
                    üî§ Alfabetic
                </button>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-@alertType">
            <span class="alert-icon">‚ÑπÔ∏è</span>
            @statusMessage
        </div>
    }

    <!-- Content -->
    <div class="content-section">
        @if (jobs == null)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p class="loading-text">Se √ÆncarcƒÉ joburile...</p>
            </div>
        }
        else if (!filteredJobs.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">üòî</div>
                <h3>Nu am gƒÉsit joburi</h3>
                <p>√éncearcƒÉ sƒÉ modifici criteriile de cƒÉutare sau sƒÉ resetezi filtrele</p>
                <button class="btn-primary" @onclick="ResetFilters">Reset filtre</button>
            </div>
        }
        else
        {
            <div class="results-info">
                <p>
                    Afi»ôez <strong>@filteredJobs.Count</strong> din <strong>@totalJobs</strong> joburi
                    @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                    {
                        <span class="filter-badge">Filtre active</span>
                    }
                </p>
            </div>

            <div class="jobs-grid">
                @foreach (var job in paginatedJobs)
                {
                    <div class="job-card" @onclick="() => NavigateToApply(job.Id)">
                        <div class="job-card-header">
                            <div class="job-title-section">
                                <h3 class="job-title">@job.Title</h3>
                                @if (IsNewJob(job.CreatedOn))
                                {
                                    <span class="badge badge-new">NOU</span>
                                }
                                @if (job.IsSalaryMentionated && job.Salary > 0)
                                {
                                    <span class="badge badge-salary">Salariu men»õionat</span>
                                }
                            </div>
                            
                            <div class="company-info">
                                <span class="company-icon">üè¢</span>
                                <span class="company-name">@GetCompanyName(job.CompanyId)</span>
                            </div>
                        </div>

                        <div class="job-card-body">
                            <div class="job-meta">
                                <div class="meta-item">
                                    <span class="meta-icon">üìÇ</span>
                                    <span class="meta-text">@job.Category</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-icon">‚è∞</span>
                                    <span class="meta-text">@job.WorkTime</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-icon">üìç</span>
                                    <span class="meta-text">@job.Location</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-icon">üíº</span>
                                    <span class="meta-text">@job.Experience</span>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(job.Description))
                            {
                                <p class="job-description">@TruncateText(job.Description, 120)</p>
                            }

                            @if (!string.IsNullOrEmpty(job.Skills))
                            {
                                <div class="job-skills">
                                    @foreach (var skill in job.Skills.Split(',').Take(5))
                                    {
                                        <span class="skill-tag">@skill.Trim()</span>
                                    }
                                    @if (job.Skills.Split(',').Length > 5)
                                    {
                                        <span class="skill-tag more">+@(job.Skills.Split(',').Length - 5)</span>
                                    }
                                </div>
                            }

                            @if (job.IsSalaryMentionated && job.Salary > 0)
                            {
                                <div class="salary-section">
                                    <span class="salary-icon">üí∞</span>
                                    <span class="salary-amount">@job.Salary MDL</span>
                                    <span class="salary-label">pe lunƒÉ</span>
                                </div>
                            }
                        </div>

                        <div class="job-card-footer">
                            <div class="job-date">
                                <span class="date-icon">üìÖ</span>
                                Postat @GetRelativeTime(job.CreatedOn)
                            </div>
                            <button class="btn-apply" @onclick:stopPropagation="true" @onclick="() => NavigateToApply(job.Id)">
                                AplicƒÉ acum ‚Üí
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="pagination">
                    <button class="page-btn" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                        ‚Üê Anterior
                    </button>
                    
                    <div class="page-numbers">
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            var pageNum = i;
                            <button class="page-number @(currentPage == pageNum ? "active" : "")" 
                                    @onclick="() => GoToPage(pageNum)">
                                @pageNum
                            </button>
                        }
                    </div>
                    
                    <button class="page-btn" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                        UrmƒÉtoarea ‚Üí
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<JobDto> jobs;
    private List<JobDto> filteredJobs = new();
    private List<JobDto> paginatedJobs = new();
    private List<CompanyDto> companies;
    private string statusMessage;
    private string alertType = "info";
    private string userId;
    private string userEmail;

    // Filters
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedWorkTime = "";
    private string selectedExperience = "";
    private string salaryFilter = "all";
    private string sortBy = "date-desc";

    // Lists for filters
    private List<string> categories = new();
    private List<string> workTimes = new();
    private List<string> experiences = new();

    // Pagination
    private int currentPage = 1;
    private int itemsPerPage = 9;
    private int totalPages => (int)Math.Ceiling((double)filteredJobs.Count / itemsPerPage);
    private int totalJobs => jobs?.Count ?? 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userId = await LocalStorage.GetItemAsync<string>("userId");
                userEmail = await LocalStorage.GetItemAsync<string>("userEmail");
                
                jobs = await Http.GetFromJsonAsync<List<JobDto>>("http://localhost:5142/api/Job");
                companies = await Http.GetFromJsonAsync<List<CompanyDto>>("http://localhost:5142/api/Company");
                
                if (jobs != null && jobs.Any())
                {
                    ExtractFilterOptions();
                    filteredJobs = jobs;
                    SortJobs(sortBy);
                    UpdatePagination();
                    statusMessage = $"Succes! {jobs.Count} joburi √ÆncƒÉrcate.";
                    alertType = "success";
                }
                else
                {
                    statusMessage = "Nu existƒÉ joburi disponibile momentan.";
                    alertType = "info";
                    jobs = new List<JobDto>();
                    filteredJobs = new List<JobDto>();
                }
            }
            catch (Exception ex)
            {
                statusMessage = $"Eroare la √ÆncƒÉrcarea joburilor: {ex.Message}";
                alertType = "info";
                jobs = new List<JobDto>();
                filteredJobs = new List<JobDto>();
            }
            
            StateHasChanged();
        }
    }

    private void ExtractFilterOptions()
    {
        if (jobs != null && jobs.Any())
        {
            categories = jobs.Select(j => j.Category).Distinct().OrderBy(c => c).ToList();
            workTimes = jobs.Select(j => j.WorkTime.ToString()).Distinct().OrderBy(w => w).ToList();
            experiences = jobs.Select(j => j.Experience.ToString()).Distinct().OrderBy(e => e).ToList();
        }
    }

    private void FilterJobs()
    {
        filteredJobs = jobs;

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredJobs = filteredJobs.Where(j =>
                j.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                j.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                j.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                GetCompanyName(j.CompanyId).Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        // Category filter
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            filteredJobs = filteredJobs.Where(j => j.Category == selectedCategory).ToList();
        }

        // Work time filter
        if (!string.IsNullOrWhiteSpace(selectedWorkTime))
        {
            filteredJobs = filteredJobs.Where(j => j.WorkTime.ToString() == selectedWorkTime).ToList();
        }

        // Experience filter
        if (!string.IsNullOrWhiteSpace(selectedExperience))
        {
            filteredJobs = filteredJobs.Where(j => j.Experience.ToString() == selectedExperience).ToList();
        }

        // Salary filter
        filteredJobs = salaryFilter switch
        {
            "with-salary" => filteredJobs.Where(j => j.IsSalaryMentionated && j.Salary > 0).ToList(),
            "no-salary" => filteredJobs.Where(j => !j.IsSalaryMentionated || j.Salary == 0).ToList(),
            _ => filteredJobs
        };

        SortJobs(sortBy);
        currentPage = 1;
        UpdatePagination();
    }

    private void SortJobs(string sortType)
    {
        sortBy = sortType;

        filteredJobs = sortType switch
        {
            "date-desc" => filteredJobs.OrderByDescending(j => j.CreatedOn).ToList(),
            "date-asc" => filteredJobs.OrderBy(j => j.CreatedOn).ToList(),
            "salary-desc" => filteredJobs.OrderByDescending(j => j.Salary).ToList(),
            "salary-asc" => filteredJobs.OrderBy(j => j.Salary).ToList(),
            "title" => filteredJobs.OrderBy(j => j.Title).ToList(),
            _ => filteredJobs
        };

        UpdatePagination();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        selectedWorkTime = "";
        selectedExperience = "";
        salaryFilter = "all";
        sortBy = "date-desc";
        currentPage = 1;
        FilterJobs();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        FilterJobs();
    }

    private void UpdatePagination()
    {
        var skip = (currentPage - 1) * itemsPerPage;
        paginatedJobs = filteredJobs.Skip(skip).Take(itemsPerPage).ToList();
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagination();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagination();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        UpdatePagination();
    }

    private void NavigateToApply(Guid jobId)
    {
        Nav.NavigateTo($"/JobApply/{jobId}");
    }

    private string GetCompanyName(Guid? companyId)
    {
        if (!companyId.HasValue || companies == null)
            return "Companie necunoscutƒÉ";

        var company = companies.FirstOrDefault(c => c.Id == companyId.Value);
        return company?.CompanyName ?? "Companie necunoscutƒÉ";
    }

    private bool IsNewJob(DateTime createdAt)
    {
        return (DateTime.Now - createdAt).TotalDays <= 3;
    }

    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalMinutes < 1)
            return "acum";
        if (timeSpan.TotalMinutes < 60)
            return $"acum {(int)timeSpan.TotalMinutes} minute";
        if (timeSpan.TotalHours < 24)
            return $"acum {(int)timeSpan.TotalHours} ore";
        if (timeSpan.TotalDays < 7)
            return $"acum {(int)timeSpan.TotalDays} zile";
        if (timeSpan.TotalDays < 30)
            return $"acum {(int)(timeSpan.TotalDays / 7)} sƒÉptƒÉm√¢ni";

        return date.ToString("dd.MM.yyyy");
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength) + "...";
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();

        return name.Substring(0, Math.Min(2, name.Length)).ToUpper();
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("isLoggedIn");
        await LocalStorage.RemoveItemAsync("userId");
        Nav.NavigateTo("/login", forceLoad: true);
    }
}