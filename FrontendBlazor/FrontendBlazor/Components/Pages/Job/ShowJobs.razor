@page "/ShowJobs"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Shared.DTOs

<div class="d-flex justify-content-between align-items-center p-3 bg-light border-bottom shadow-sm">
    <h3 class="m-0">Lista Joburilor</h3>

    @if (!string.IsNullOrEmpty(userEmail))
    {
        <div class="d-flex align-items-center">
            <div class="text-muted me-2">
                ðŸ‘¤ Logat ca: <strong>@userEmail</strong>
            </div>
            <button class="btn btn-outline-danger btn-sm" @onclick="Logout">Logout</button>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

@if (jobs == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!jobs.Any())
{
    <p class="text-muted mt-3">No jobs found.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mt-3">
        @foreach (var job in jobs)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@job.Title</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@job.Category | @job.WorkTime</h6>
                        
                        @if (job.IsSalaryMentionated)
                        {
                            <p class="card-text"><strong>Salary:</strong> @job.Salary</p>
                        }

                        <p class="card-text"><strong>Company:</strong>
                            @companies?.FirstOrDefault(c => c.Id == job.CompanyId)?.CompanyName
                        </p>
                    </div>
                    <div class="card-footer text-end">
                        <a href="/JobApply/@job.Id" class="btn btn-primary btn-sm">Apply</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<JobDto> jobs;
    private List<CompanyDto> companies;
    private string statusMessage;
    private string userEmail;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userEmail = await LocalStorage.GetItemAsync<string>("userEmail");
                jobs = await Http.GetFromJsonAsync<List<JobDto>>("http://localhost:5142/api/Job");
                companies = await Http.GetFromJsonAsync<List<CompanyDto>>("http://localhost:5142/api/Company");
                
                statusMessage = jobs != null && jobs.Any() 
                    ? "Jobs loaded successfully!" 
                    : "No jobs found.";
            }
            catch (Exception ex)
            {
                statusMessage = $"Error loading jobs: {ex.Message}";
                jobs = new List<JobDto>(); // Previne loading infinit
            }
            
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("isLoggedIn");
        await LocalStorage.RemoveItemAsync("userEmail");
        Nav.NavigateTo("/login", forceLoad: true);
    }
}